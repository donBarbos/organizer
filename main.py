import time
import re

from aiogram import Bot, types  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å telegram
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ContentTypes, callback_query
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from db import Create_database, Verification, Join, Get_Affair, Get_QuickAffair # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from config import BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

Create_database()


@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    user_id = message.from_user.id  # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ id
    if Verification(user_id):
        await bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –º—ã —Å —Ç–æ–±–æ–π —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–∞–Ω—å—à–µ.\n–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.')
    else:
        if message.from_user.first_name != 'None':  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞
            name = message.from_user.first_name
        elif message.from_user.username != 'None':
            name = message.from_user.username
        elif message.from_user.last_name != 'None':
            name = message.from_user.last_name
        else:
            name = ''
        Join(message.from_user.id, name)
        await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIEqF5VL5ozeLnmwSaOJAbKQDQAAfidjQACYwkAAgk7OxMAAVFVxKRh8u0YBA')
        await bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫.\n'
                                                '–û–Ω –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n'
                                                '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º –Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è,\n'
                                                '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n'
                                                '–ß—Ç–æ–±—ã –≥–ª—É–±–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /commands')

    await bot.send_message(message.chat.id, 'üïê –í –æ–∂–∏–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
        

@dp.message_handler(commands=['commands'])
async def list_commands(message: types.Message):
    await bot.send_message(message.chat.id,
                           '–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ—Ç:\n\n'
                           '/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
                           '/contacts - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏ –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n'
                           '/today - —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –¥–µ–Ω—å\n'
                           '—á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')


@dp.message_handler(commands=['today'])
async def today(message: types.Message):
    await bot.send_message(message.chat.id, '—Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n\n')


@dp.message_handler(commands=['info'])
async def give_info(message: types.Message):
    await bot.send_message(message.chat.id, '[–û –±–æ—Ç–µ]\n–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ª.'
                                            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏.'
                                            '–í —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n'
                                            '–¢–∞–∫–∂–µ –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Github')


@dp.message_handler(commands=['contacts'])
async def contacts(message: types.Message):
    btn_link = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ GitHub', url='https://github.com/DONSIMON92/bot-organizer')
    keyboard_link = types.InlineKeyboardMarkup().add(btn_link)
    await bot.send_message(message.chat.id, '–ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub', reply_markup=keyboard_link)


@dp.message_handler(content_types=['photo'])
async def get_photo(message: types.Message):
    await bot.send_message(message.chat.id, '‚ùå –Ø –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ')


@dp.message_handler(content_types=['text'])  # –¥–æ–ø–∏—Å–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∑–∞–º–µ—Ç–æ–∫
async def get_task(message: types.Message):
    if not message.is_command():
        text = message.text
        keyboard_time = types.InlineKeyboardMarkup()
        btn_timer = InlineKeyboardButton('‚åõ —Ç–∞–π–º–µ—Ä', callback_data='timer')
        btn_clock = InlineKeyboardButton('‚è∞ —á–∞—Å—ã', callback_data='clock')
        keyboard_time.add(btn_timer, btn_clock)
        await bot.send_message(message.chat.id, 'ü§î –ö–∞–∫ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n'
                                                '(—Å –ø–æ–º–æ—â—å—é —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)', reply_markup=keyboard_time)
    else:
        await message.answer('‚ùå –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n'
                             '–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /commands')


@dp.callback_query_handler(lambda c: c.data == 'timer')
async def get_btn_timer(callback_query: types.CallbackQuery):
    #await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'üïõ –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.')
   

@dp.message_handler(content_types=['text'])
async def get_timer(message: types.Message):
    time_txt = message.text

    time_txt = re.sub(r'–∏ ', '', time_txt)
    time_txt = re.sub(r'—á–µ—Ä–µ–∑ ', '', time_txt)

    patterns_hour = ['—á–∞—Å–æ–≤', '—á–∞—Å–∞', '—á–∞—Å', '—á']
    patterns_minute = ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç', '–º–∏–Ω', '–º']
    patterns_second = ['—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥', '—Å–µ–∫', '—Å']

    try:
        for pattern in patterns_hour:
            if re.search(pattern, time_txt, flags=re.IGNORECASE):
                result = re.split(pattern, time_txt, flags=re.IGNORECASE)
                time_from_hour = 3600 * int(re.search(r'\d{1,3}', result[0]).group(0))  # –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö
                time_txt = str(result[1])  # –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ
                break
    except AttributeError:
        time_from_hour = 0
        print('Error - no pattern(hour) found')

    try:
        for pattern in patterns_minute:
            if re.search(pattern, time_txt, flags=re.IGNORECASE):
                result = re.split(pattern, time_txt, flags=re.IGNORECASE)
                time_from_min = 60 * int(re.search(r'\d{1,3}', result[0]).group(0))
                time_txt = str(result[1])
                break
    except AttributeError:
        time_from_min = 0
        print('Error - no pattern(minute) found')

    try:
        for pattern in patterns_second:
            if re.search(pattern, time_txt, flags=re.IGNORECASE):
                result = re.split(pattern, time_txt, flags=re.IGNORECASE)
                time_from_sec = int(re.search(r'\d{1,6}', result[0]).group(0))
                break
    except AttributeError:
        time_from_sec = 0
        print('Error - no pattern(second) found')

    time_wait = time_from_hour + time_from_min + time_from_sec
    await message_handler.answer("‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞."
                                f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ {time_wait/3600} —á.")
    Get_QuickAffair(user_id, time_wait, data)


@dp.callback_query_handler(lambda c: c.data == 'clock')
async def get_btn_clock(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'üïõ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è')


if __name__ == '__main__':  # –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –±–æ—Ç–∞
    executor.start_polling(dp)
