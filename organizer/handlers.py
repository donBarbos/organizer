import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from organizer.loader import bot, db, dp
from organizer.scan import search_time


@dp.message_handler(commands="start")
async def start_message(message: types.Message):
    """–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if await db.verification(message.from_user.id):
        await bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç, –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–∞–Ω—å—à–µ.\n" "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n",
        )
    else:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º–∞
        if message.from_user.first_name != "None":
            name = message.from_user.first_name
        elif message.from_user.username != "None":
            name = message.from_user.username
        elif message.from_user.last_name != "None":
            name = message.from_user.last_name
        else:
            name = ""
        await db.add_user(message.from_user.id, name, message.from_user.locale.language_name)
        await bot.send_sticker(
            message.chat.id,
            "CAACAgIAAxkBAAIEqF5VL5ozeLnmwSaOJAbKQDQAAfidjQACYwkAAgk7OxMAAVFVxKRh8u0YBA",
        )
        await bot.send_message(
            message.chat.id,
            "‚ÑπÔ∏è <b>[–û –±–æ—Ç–µ]\n</b> –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ª.\n"
            "–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏.\n"
            "–ê –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ /commands.\n",
        )


@dp.message_handler(commands=("help", "info"))
async def give_info(message: types.Message):
    """—Ü–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞."""
    await bot.send_message(
        message.chat.id,
        "‚ÑπÔ∏è <b>[–û –±–æ—Ç–µ]\n</b> –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–ª.\n"
        "–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏.\n"
        "–ê –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ /commands.\n"
        "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞–µ—Ç –±–æ—Ç:\n"
        "/help –∏–ª–∏ /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Å–ø—Ä–∞–≤–∫–∞,\n"
        "/today - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è,\n"
        "/settings - –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏,\n"
        "/contacts - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞.",
    )


@dp.message_handler(commands="today")
async def give_list_today(message: types.Message):
    """–≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–µ–ª, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."""
    list_today = await db.get_list_today(message.from_user.id)
    if list_today:
        list_today = "\n".join(list_today)
        await bot.send_message(message.chat.id, "üìã –°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n" f"{list_today}")
    else:
        await bot.send_message(message.chat.id, "üìã –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@dp.message_handler(commands="contacts")
async def give_contacts(message: types.Message):
    """—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞."""
    btn_link = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ GitHub", url="https://github.com/DONSIMON92/organizer")
    keyboard_link = types.InlineKeyboardMarkup().add(btn_link)
    await bot.send_message(message.chat.id, "üë®‚Äçüíª –ö–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub", reply_markup=keyboard_link)


@dp.message_handler(commands="settings")
async def give_settings(message: types.Message):
    """—Å–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º."""
    name = await db.get_name(message.from_user.id)
    lang = await db.get_lang(message.from_user.id)
    btn_name = types.InlineKeyboardButton(text=f"–∏–º—è: {name}", callback_data="name")
    btn_lang = types.InlineKeyboardButton(text=f"—è–∑—ã–∫: {lang}", callback_data="lang")
    keyboard_settings = types.InlineKeyboardMarkup().add(btn_name, btn_lang)
    await bot.send_message(message.chat.id, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard_settings)


@dp.callback_query_handler(lambda c: c.data == "name")
async def alter_name(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "–ö–∞–∫ –º–Ω–µ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")


@dp.callback_query_handler(lambda c: c.data == "lang")
async def alter_lang(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:")


class Form(StatesGroup):
    wait_text = State()
    wait_type = State()
    wait_time_txt = State()


@dp.message_handler(commands="new")  # –¥–æ–ø–∏—Å–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –∑–∞–º–µ—Ç–æ–∫
async def get_task(message: types.Message):
    await Form.wait_text.set()
    await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç")


@dp.message_handler(state=Form.wait_text)
async def process_text(message: types.Message, state: FSMContext, bot):
    async with state.proxy() as data:
        data["wait_text"] = message.text

    await Form.next()
    keyboard_time = types.InlineKeyboardMarkup()
    btn_timer = types.InlineKeyboardButton("‚åõ —Ç–∞–π–º–µ—Ä", callback_data="timer")
    btn_clock = types.InlineKeyboardButton("‚è∞ —á–∞—Å—ã", callback_data="clock")
    keyboard_time.add(btn_timer, btn_clock)
    await bot.send_message(
        message.chat.id,
        "ü§î –ö–∞–∫ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?\n"
        "(—Å –ø–æ–º–æ—â—å—é —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)",
        reply_markup=keyboard_time,
    )


@dp.callback_query_handler(state=Form.wait_type)
async def process_type(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "timer":
        async with state.proxy() as data:
            data["wait_type"] = "timer"
    else:
        await bot.send_message(callback_query.from_user.id, current_state)

    print(current_state)
    await bot.send_message(
        callback_query.from_user.id,
        "üïõ –ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.",
    )


@dp.message_handler(state=Form.wait_time_txt)
async def process_timer(message: types.Message, state: FSMContext):
    time_txt = message.text
    time_wait = await search_time(time_txt)  # –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    async with state.proxy() as data:
        data["wait_time_txt"] = time_wait
    await state.finish()
    await bot.send_message(f"‚úÖ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ {time_wait} —Å–µ–∫.")
    await asyncio.sleep(time_wait)


@dp.callback_query_handler(lambda c: c.data == "clock")
async def get_btn_clock(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üïõ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è")


@dp.message_handler()
async def unknown_message(message: types.Message):
    if not message.is_command():
        await bot.send_message(message.chat.id, "‚ùå –Ø –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º.")
    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n" "–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /commands")
